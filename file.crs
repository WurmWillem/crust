// every program has an entry point called 'main'
fn main() {
    // print values with newline with the function 'println'
    //println("Hello World!");

    //// create variables with C-like syntax
    //int variable = 3;

    //// use functions defined later in the file, no forward declaration necessary
    //factorial(5); // evaluates to 120

    //// for loops (and there are while loops as well)
    //for i in 0 to 10 {
    //    println(i); // prints the numbers 1 up to and including 9
    //}

    //// create arrays with the following syntax
    //int[] array = [1, 2, 3];
    //println(array[0]);  // prints 1

    //// create instances with 'struct_name(fields)' syntax
    //Vector2D vec2D = Vector2D(3., 2.);
    //println(vec2D.x); // prints '3.'
    //// call methods with the syntax 'struct_name.method_name(arguments)'
    //double product = vec2D.product(); // holds '6.'

    // use structs from the standard library such as Vec (dynamic array)
    Vec vec = Vec([1, 2, 3]);
    //p(p("hoi"));
    int x = 3;
    vec.push(4);
    //println(vec.get(3)); // prints '4'
}

fn p(str msg): str {
    pr msg;
    return "return value ";
}

// define a function named 'factorial' that takes and returns a uint
fn factorial(uint n): uint {
    if n <= 1 return 1;
    return n * factorial(n - 1);
}

// define a struct named 'Vector2D'
struct Vector2D {
    // declare the fields
    double x;
    double y;

    // define the functions
    fn product(self): double {
        // use 'self.property_name' to access fields and methods
        return self.x * self.y;
    }
}
